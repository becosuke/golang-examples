// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/syncmap/syncmap.go

// Package syncmap is a generated GoMock package.
package syncmap

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSyncMap is a mock of SyncMap interface.
type MockSyncMap struct {
	ctrl     *gomock.Controller
	recorder *MockSyncMapMockRecorder
}

// MockSyncMapMockRecorder is the mock recorder for MockSyncMap.
type MockSyncMapMockRecorder struct {
	mock *MockSyncMap
}

// NewMockSyncMap creates a new mock instance.
func NewMockSyncMap(ctrl *gomock.Controller) *MockSyncMap {
	mock := &MockSyncMap{ctrl: ctrl}
	mock.recorder = &MockSyncMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncMap) EXPECT() *MockSyncMapMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSyncMap) Delete(key interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockSyncMapMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSyncMap)(nil).Delete), key)
}

// Load mocks base method.
func (m *MockSyncMap) Load(key interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockSyncMapMockRecorder) Load(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSyncMap)(nil).Load), key)
}

// LoadOrStore mocks base method.
func (m *MockSyncMap) LoadOrStore(key, value interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrStore", key, value)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadOrStore indicates an expected call of LoadOrStore.
func (mr *MockSyncMapMockRecorder) LoadOrStore(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrStore", reflect.TypeOf((*MockSyncMap)(nil).LoadOrStore), key, value)
}

// Store mocks base method.
func (m *MockSyncMap) Store(key, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", key, value)
}

// Store indicates an expected call of Store.
func (mr *MockSyncMapMockRecorder) Store(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockSyncMap)(nil).Store), key, value)
}
