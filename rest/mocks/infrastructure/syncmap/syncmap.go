// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/syncmap/syncmap.go

// Package syncmap is a generated GoMock package.
package syncmap

import (
	reflect "reflect"

	syncmap "github.com/becosuke/golang-examples/rest/internal/infrastructure/syncmap"
	gomock "github.com/golang/mock/gomock"
)

// MockSyncMap is a mock of SyncMap interface.
type MockSyncMap struct {
	ctrl     *gomock.Controller
	recorder *MockSyncMapMockRecorder
}

// MockSyncMapMockRecorder is the mock recorder for MockSyncMap.
type MockSyncMapMockRecorder struct {
	mock *MockSyncMap
}

// NewMockSyncMap creates a new mock instance.
func NewMockSyncMap(ctrl *gomock.Controller) *MockSyncMap {
	mock := &MockSyncMap{ctrl: ctrl}
	mock.recorder = &MockSyncMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncMap) EXPECT() *MockSyncMapMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSyncMap) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSyncMapMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSyncMap)(nil).Delete), arg0)
}

// Load mocks base method.
func (m *MockSyncMap) Load(arg0 string) (*syncmap.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(*syncmap.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockSyncMapMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSyncMap)(nil).Load), arg0)
}

// LoadOrStore mocks base method.
func (m *MockSyncMap) LoadOrStore(arg0, arg1 string) (*syncmap.Message, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrStore", arg0, arg1)
	ret0, _ := ret[0].(*syncmap.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadOrStore indicates an expected call of LoadOrStore.
func (mr *MockSyncMapMockRecorder) LoadOrStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrStore", reflect.TypeOf((*MockSyncMap)(nil).LoadOrStore), arg0, arg1)
}

// Store mocks base method.
func (m *MockSyncMap) Store(arg0, arg1 string) (*syncmap.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(*syncmap.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockSyncMapMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockSyncMap)(nil).Store), arg0, arg1)
}
