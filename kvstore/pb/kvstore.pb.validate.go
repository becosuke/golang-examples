// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kvstore.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePackRequestMultiError, or nil if none found.
func (m *CreatePackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPack() == nil {
		err := CreatePackRequestValidationError{
			field:  "Pack",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPack()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePackRequestValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePackRequestValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePackRequestValidationError{
				field:  "Pack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePackRequestMultiError(errors)
	}
	return nil
}

// CreatePackRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePackRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePackRequestMultiError) AllErrors() []error { return m }

// CreatePackRequestValidationError is the validation error returned by
// CreatePackRequest.Validate if the designated constraints aren't met.
type CreatePackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackRequestValidationError) ErrorName() string {
	return "CreatePackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackRequestValidationError{}

// Validate checks the field values on CreatePackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePackResponseMultiError, or nil if none found.
func (m *CreatePackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPack()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePackResponseValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePackResponseValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePackResponseValidationError{
				field:  "Pack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePackResponseMultiError(errors)
	}
	return nil
}

// CreatePackResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePackResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePackResponseMultiError) AllErrors() []error { return m }

// CreatePackResponseValidationError is the validation error returned by
// CreatePackResponse.Validate if the designated constraints aren't met.
type CreatePackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackResponseValidationError) ErrorName() string {
	return "CreatePackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackResponseValidationError{}

// Validate checks the field values on GetPackRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPackRequestMultiError,
// or nil if none found.
func (m *GetPackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSeal() == nil {
		err := GetPackRequestValidationError{
			field:  "Seal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSeal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPackRequestValidationError{
					field:  "Seal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPackRequestValidationError{
					field:  "Seal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackRequestValidationError{
				field:  "Seal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPackRequestMultiError(errors)
	}
	return nil
}

// GetPackRequestMultiError is an error wrapping multiple validation errors
// returned by GetPackRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPackRequestMultiError) AllErrors() []error { return m }

// GetPackRequestValidationError is the validation error returned by
// GetPackRequest.Validate if the designated constraints aren't met.
type GetPackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackRequestValidationError) ErrorName() string { return "GetPackRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackRequestValidationError{}

// Validate checks the field values on GetPackResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPackResponseMultiError, or nil if none found.
func (m *GetPackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPack()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPackResponseValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPackResponseValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackResponseValidationError{
				field:  "Pack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPackResponseMultiError(errors)
	}
	return nil
}

// GetPackResponseMultiError is an error wrapping multiple validation errors
// returned by GetPackResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPackResponseMultiError) AllErrors() []error { return m }

// GetPackResponseValidationError is the validation error returned by
// GetPackResponse.Validate if the designated constraints aren't met.
type GetPackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackResponseValidationError) ErrorName() string { return "GetPackResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackResponseValidationError{}

// Validate checks the field values on UpdatePackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePackRequestMultiError, or nil if none found.
func (m *UpdatePackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPack() == nil {
		err := UpdatePackRequestValidationError{
			field:  "Pack",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPack()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePackRequestValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePackRequestValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePackRequestValidationError{
				field:  "Pack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePackRequestMultiError(errors)
	}
	return nil
}

// UpdatePackRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePackRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePackRequestMultiError) AllErrors() []error { return m }

// UpdatePackRequestValidationError is the validation error returned by
// UpdatePackRequest.Validate if the designated constraints aren't met.
type UpdatePackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackRequestValidationError) ErrorName() string {
	return "UpdatePackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackRequestValidationError{}

// Validate checks the field values on UpdatePackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePackResponseMultiError, or nil if none found.
func (m *UpdatePackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPack()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePackResponseValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePackResponseValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePackResponseValidationError{
				field:  "Pack",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePackResponseMultiError(errors)
	}
	return nil
}

// UpdatePackResponseMultiError is an error wrapping multiple validation errors
// returned by UpdatePackResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdatePackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePackResponseMultiError) AllErrors() []error { return m }

// UpdatePackResponseValidationError is the validation error returned by
// UpdatePackResponse.Validate if the designated constraints aren't met.
type UpdatePackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackResponseValidationError) ErrorName() string {
	return "UpdatePackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackResponseValidationError{}

// Validate checks the field values on DeletePackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePackRequestMultiError, or nil if none found.
func (m *DeletePackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSeal() == nil {
		err := DeletePackRequestValidationError{
			field:  "Seal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSeal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePackRequestValidationError{
					field:  "Seal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePackRequestValidationError{
					field:  "Seal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePackRequestValidationError{
				field:  "Seal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePackRequestMultiError(errors)
	}
	return nil
}

// DeletePackRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePackRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePackRequestMultiError) AllErrors() []error { return m }

// DeletePackRequestValidationError is the validation error returned by
// DeletePackRequest.Validate if the designated constraints aren't met.
type DeletePackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackRequestValidationError) ErrorName() string {
	return "DeletePackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackRequestValidationError{}

// Validate checks the field values on Pack with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pack with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PackMultiError, or nil if none found.
func (m *Pack) ValidateAll() error {
	return m.validate(true)
}

func (m *Pack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 128 {
		err := PackValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 128 {
		err := PackValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PackMultiError(errors)
	}
	return nil
}

// PackMultiError is an error wrapping multiple validation errors returned by
// Pack.ValidateAll() if the designated constraints aren't met.
type PackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackMultiError) AllErrors() []error { return m }

// PackValidationError is the validation error returned by Pack.Validate if the
// designated constraints aren't met.
type PackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackValidationError) ErrorName() string { return "PackValidationError" }

// Error satisfies the builtin error interface
func (e PackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackValidationError{}

// Validate checks the field values on Seal with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Seal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Seal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SealMultiError, or nil if none found.
func (m *Seal) ValidateAll() error {
	return m.validate(true)
}

func (m *Seal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 128 {
		err := SealValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SealMultiError(errors)
	}
	return nil
}

// SealMultiError is an error wrapping multiple validation errors returned by
// Seal.ValidateAll() if the designated constraints aren't met.
type SealMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SealMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SealMultiError) AllErrors() []error { return m }

// SealValidationError is the validation error returned by Seal.Validate if the
// designated constraints aren't met.
type SealValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SealValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SealValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SealValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SealValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SealValidationError) ErrorName() string { return "SealValidationError" }

// Error satisfies the builtin error interface
func (e SealValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SealValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SealValidationError{}
