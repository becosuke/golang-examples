// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: kvstore.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KVStoreServiceClient is the client API for KVStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVStoreServiceClient interface {
	GetPack(ctx context.Context, in *GetPackRequest, opts ...grpc.CallOption) (*GetPackResponse, error)
	CreatePack(ctx context.Context, in *CreatePackRequest, opts ...grpc.CallOption) (*CreatePackResponse, error)
	UpdatePack(ctx context.Context, in *UpdatePackRequest, opts ...grpc.CallOption) (*UpdatePackResponse, error)
	DeletePack(ctx context.Context, in *DeletePackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type kVStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKVStoreServiceClient(cc grpc.ClientConnInterface) KVStoreServiceClient {
	return &kVStoreServiceClient{cc}
}

func (c *kVStoreServiceClient) GetPack(ctx context.Context, in *GetPackRequest, opts ...grpc.CallOption) (*GetPackResponse, error) {
	out := new(GetPackResponse)
	err := c.cc.Invoke(ctx, "/pb.KVStoreService/GetPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVStoreServiceClient) CreatePack(ctx context.Context, in *CreatePackRequest, opts ...grpc.CallOption) (*CreatePackResponse, error) {
	out := new(CreatePackResponse)
	err := c.cc.Invoke(ctx, "/pb.KVStoreService/CreatePack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVStoreServiceClient) UpdatePack(ctx context.Context, in *UpdatePackRequest, opts ...grpc.CallOption) (*UpdatePackResponse, error) {
	out := new(UpdatePackResponse)
	err := c.cc.Invoke(ctx, "/pb.KVStoreService/UpdatePack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVStoreServiceClient) DeletePack(ctx context.Context, in *DeletePackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.KVStoreService/DeletePack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVStoreServiceServer is the server API for KVStoreService service.
// All implementations must embed UnimplementedKVStoreServiceServer
// for forward compatibility
type KVStoreServiceServer interface {
	GetPack(context.Context, *GetPackRequest) (*GetPackResponse, error)
	CreatePack(context.Context, *CreatePackRequest) (*CreatePackResponse, error)
	UpdatePack(context.Context, *UpdatePackRequest) (*UpdatePackResponse, error)
	DeletePack(context.Context, *DeletePackRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedKVStoreServiceServer()
}

// UnimplementedKVStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKVStoreServiceServer struct {
}

func (UnimplementedKVStoreServiceServer) GetPack(context.Context, *GetPackRequest) (*GetPackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPack not implemented")
}
func (UnimplementedKVStoreServiceServer) CreatePack(context.Context, *CreatePackRequest) (*CreatePackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePack not implemented")
}
func (UnimplementedKVStoreServiceServer) UpdatePack(context.Context, *UpdatePackRequest) (*UpdatePackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePack not implemented")
}
func (UnimplementedKVStoreServiceServer) DeletePack(context.Context, *DeletePackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePack not implemented")
}
func (UnimplementedKVStoreServiceServer) mustEmbedUnimplementedKVStoreServiceServer() {}

// UnsafeKVStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVStoreServiceServer will
// result in compilation errors.
type UnsafeKVStoreServiceServer interface {
	mustEmbedUnimplementedKVStoreServiceServer()
}

func RegisterKVStoreServiceServer(s grpc.ServiceRegistrar, srv KVStoreServiceServer) {
	s.RegisterService(&KVStoreService_ServiceDesc, srv)
}

func _KVStoreService_GetPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStoreServiceServer).GetPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KVStoreService/GetPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStoreServiceServer).GetPack(ctx, req.(*GetPackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVStoreService_CreatePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStoreServiceServer).CreatePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KVStoreService/CreatePack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStoreServiceServer).CreatePack(ctx, req.(*CreatePackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVStoreService_UpdatePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStoreServiceServer).UpdatePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KVStoreService/UpdatePack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStoreServiceServer).UpdatePack(ctx, req.(*UpdatePackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVStoreService_DeletePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStoreServiceServer).DeletePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KVStoreService/DeletePack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStoreServiceServer).DeletePack(ctx, req.(*DeletePackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVStoreService_ServiceDesc is the grpc.ServiceDesc for KVStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KVStoreService",
	HandlerType: (*KVStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPack",
			Handler:    _KVStoreService_GetPack_Handler,
		},
		{
			MethodName: "CreatePack",
			Handler:    _KVStoreService_CreatePack_Handler,
		},
		{
			MethodName: "UpdatePack",
			Handler:    _KVStoreService_UpdatePack_Handler,
		},
		{
			MethodName: "DeletePack",
			Handler:    _KVStoreService_DeletePack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvstore.proto",
}
